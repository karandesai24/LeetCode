#DFS
void topoSort(int node, vector<bool>&visited, stack<int> &s, unordered_map<int, list<int>> &adj){
   visited[node] = 1;
for(auto neighbour: adj[node]) {
   if(!visited[neighbour])
       topoSort(neighbour, visited, s, adj);
}
   s.push(node);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
   //create adj list
   unordered_map<int, list<int>> adj;
   for(int i=0; i<e; i++) {
       int u = edges[i][0];
       int v = edges[i][1];
       adj[u].push_back(v);
   }
   //call dfs topological sort util function for al components
   vector<bool> visited(v);
   stack<int> s;
   for(int i=0; i<v ; i++){
       if(!visited[i])
           topoSort(i, visited, s, adj);
   }
   vector<int> ans;
   while(!s.empty())
   {
       ans.push_back(s.top());
       s.pop();
   }
   return ans;
}

#BFS

vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,vector<int>> adj;
    for(int i=0;i<e;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }
    vector<int> indegree(v);
    for(auto i: adj){
        for(auto j: i.second){
            indegree[j]++;
        }
    }
    queue<int> q;
    vector<int> ans;
    for(int i=0;i<v;i++){
        if(indegree[i]==0){
            q.push(i);
        }
    }
    while(!q.empty()){
        int front =q.front();
        q.pop();
        ans.push_back(front);
        for(auto it: adj[front]){
            indegree[it]--;
            if(indegree[it]==0)
                q.push(it);
        }
    }
    return ans;
}
