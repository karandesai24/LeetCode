// using kahn's algorithm 
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,list<int> > adj ; 
    for( int i =0 ; i < edges.size();i++)
    {
      int u = edges[i][0]; 
      int v = edges[i][1]; 
      // making the adj list for the directed graph
     adj[u].push_back(v);     
    }
   vector<int> ans ; 
   vector<int> degree(v);
    // degree array represent the indegree of every node 
    for( auto i : adj)
    {
         for ( auto j : i.second)
             degree[j]++; 
    }
    queue<int> q ; 
    for( int i =0 ; i < v ; i++)
    {
        if(degree[i]==0)
            q.push(i);   
    }
    // performing bfs 
    while(!q.empty())
    {
        int f = q.front(); 
        q.pop(); 
        ans.push_back(f);
        for(auto i : adj[f])
        {
            degree[i]--; 
            if(degree[i]==0)
            {
                q.push(i); 
            }
        }   
    }
    return ans ; 
}
